def APP = 'googlewebrtc'

def HASH
def BRANCH
def TAG_NAME
def VERSION
def BUILD_DATE

def DOCKER_ARM64
def DOCKER_AMD64
def DOCKER_UBUNTU_20_04_AMD64

properties([
    [$class: 'CopyArtifactPermissionProperty', projectNames: '*'],
])


pipeline {

    agent {
        node ('docker')
    }

    environment {
        ARTIFACTORY_URL='https://pdx-artifacts.rad.ubnt.com'
        ARTIFACTORY_CREDS=credentials('ARTIFACTORY_CREDS')
        ARTIFACTORY_CENTRALIZED_UPLOAD='yes'
        GITHUB_READ_FILE_TOKEN=credentials('GITHUB_READ_FILE_TOKEN')
    }

    options {
        skipDefaultCheckout true
    }


    stages {
    
        stage('Prepare') {
            steps {
                script {
                      BUILD_DATE = sh(returnStdout: true, script: 'date -u +\'%Y-%m-%dT%H:%M:%SZ\'').trim()
                      BRANCH = env.BRANCH_NAME
                      TAG_NAME = env.TAG_NAME
                      if (BRANCH.startsWith('origin/')) BRANCH = BRANCH.substring('origin/'.length())
                }
            }
        }
    
        stage('Build') {
            parallel {
                stage('MacOS') {
                    stages {
                        stage('Checkout') {
                            steps {
                                node(label: 'rix-macos-amd64') {
					deleteDir()
					checkout([$class : 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: scm.userRemoteConfigs[0].credentialsId, url: 'https://github.com/ubiquiti/libjingle-build']]])
                                }
                            }
                        }
                        
                        stage('MacOS build') {
                            steps {
                                node(label: 'rix-macos-amd64') {
                                    sh label: 'build', script: "echo BRANCH=${BRANCH} TAG_NAME=${TAG_NAME}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }
}
