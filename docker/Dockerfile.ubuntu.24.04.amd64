# syntax=docker/dockerfile:experimental
FROM --platform=linux/amd64 ubuntu:24.04

ARG DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NONINTERACTIVE_SEEN=true
ENV LC_ALL=C LANGUAGE=C LANG=C

ENV OS_NAME=Ubuntu
ENV OS_VERSION=24.04
ENV OS_ARCH=x86_64
ENV ARTIFACTORY_URL="https://pdx-artifacts.rad.ubnt.com"

ARG HOST_UID=1002

RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    useradd -u $HOST_UID --create-home --shell /bin/bash ubnt

RUN dpkg --configure -a

RUN apt-get update && apt-get install -qy apt-utils gnupg2

RUN printf "installing packages...\n" && \
    apt-get update && \
    apt-get install -y --fix-missing && \
    apt-get install -y --no-install-recommends \
    apt-utils
RUN apt-get install -y --no-install-recommends autoconf
RUN apt-get install -y --no-install-recommends automake
RUN apt-get install -y --no-install-recommends binfmt-support
RUN apt-get install -y --no-install-recommends build-essential
RUN apt-get install -y --no-install-recommends curl
RUN apt-get install -y --no-install-recommends fakeroot
RUN apt-get install -y --no-install-recommends procps
RUN apt-get install -y --no-install-recommends git
RUN apt-get install -y --no-install-recommends gnupg2
RUN apt-get install -y --no-install-recommends wget
RUN apt-get install -y --no-install-recommends libsystemd-dev
RUN apt-get install -y --no-install-recommends libbluetooth-dev
RUN apt-get install -y --no-install-recommends libudev-dev
RUN apt-get install -y --no-install-recommends jq
RUN apt-get install -y --no-install-recommends lsb-release
RUN apt-get install -y --no-install-recommends sshpass
RUN apt-get install -y --no-install-recommends pkg-config
RUN apt-get install -y --no-install-recommends bc
RUN apt-get install -y --no-install-recommends bzip2
RUN apt-get install -y --no-install-recommends ca-certificates
RUN apt-get install -y --no-install-recommends cpio
RUN apt-get install -y --no-install-recommends file
RUN apt-get install -y --no-install-recommends git
RUN apt-get install -y --no-install-recommends gzip
RUN apt-get install -y --no-install-recommends libncurses5-dev
RUN apt-get install -y --no-install-recommends make
RUN apt-get install -y --no-install-recommends openssh-client
RUN apt-get install -y --no-install-recommends python3
RUN apt-get install -y --no-install-recommends rsync
RUN apt-get install -y --no-install-recommends unzip
RUN apt-get install -y --no-install-recommends wget
RUN apt-get install -y --no-install-recommends asciidoc
RUN apt-get install -y --no-install-recommends cmake
RUN apt-get install -y --no-install-recommends lzip
RUN apt-get install -y --no-install-recommends tar
RUN apt-get install -y --no-install-recommends xz-utils
RUN apt-get install -y --no-install-recommends eatmydata
RUN apt-get install -y --no-install-recommends uidmap
RUN apt-get install -y --no-install-recommends xxd
RUN apt-get install -y --no-install-recommends vim
RUN apt-get install -y --no-install-recommends ninja-build
RUN apt-get install -y --no-install-recommends curl
RUN apt-get install -y --no-install-recommends autoconf
RUN apt-get install -y --no-install-recommends autotools-dev
RUN apt-get install -y --no-install-recommends sudo
RUN apt-get install -y --no-install-recommends automake
RUN apt-get install -y --no-install-recommends libtool
RUN apt-get install -y --no-install-recommends ant
RUN apt-get install -y --no-install-recommends openjdk-17-jdk
RUN apt-get install -y --no-install-recommends nasm
RUN apt-get install -y --no-install-recommends tree
RUN apt-get install -y --no-install-recommends clang-format
RUN apt-get install -y --no-install-recommends bison
RUN apt-get install -y --no-install-recommends flex
RUN apt-get install -y --no-install-recommends python3-venv
RUN apt-get install -y --no-install-recommends python3-pip
RUN apt-get install -y --no-install-recommends python3-dev
RUN apt-get install -y --no-install-recommends postgresql

RUN \
    sed -i /etc/sudoers -re 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD: ALL/g' && \
    sed -i /etc/sudoers -re 's/^root.*/root ALL=(ALL:ALL) NOPASSWD: ALL/g' && \
    sed -i /etc/sudoers -re 's/^#includedir.*/## **Removed the include directive** ##"/g' && \
    echo "ubnt ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    echo "ubnt user:";  su - ubnt -c id

RUN printf "installing fpm...\n" && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
	ruby \
	ruby-dev \
	rubygems &&\
	gem install --no-document fpm

RUN \
    sed -i /etc/sudoers -re 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD: ALL/g' && \
    sed -i /etc/sudoers -re 's/^root.*/root ALL=(ALL:ALL) NOPASSWD: ALL/g' && \
    sed -i /etc/sudoers -re 's/^#includedir.*/## **Removed the include directive** ##"/g' && \
    echo "ubnt ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    echo "ubnt user:";  su - ubnt -c id

RUN wget https://releases.jfrog.io/artifactory/jfrog-cli/v2/[RELEASE]/jfrog-cli-linux-amd64/jfrog -O /usr/local/bin/jfrog && sudo chmod a+x /usr/local/bin/jfrog
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
WORKDIR /build
USER ubnt
ENV HOME=/home/ubnt
RUN printf "installing nvm...\n" && \
	curl https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash
ENV NVM_DIR="$HOME/.nvm"
RUN \. "$NVM_DIR/nvm.sh" && \. "$NVM_DIR/bash_completion"
ENV NVM_ENV_SH=$HOME/.nvm/nvm.sh
